{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // To get the quiz ID from the URL\nimport { getQuizDetails } from '../api'; // Assuming you have this function to fetch quiz details\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameters\n  const [quiz, setQuiz] = useState(null);\n  const [answers, setAnswers] = useState([]); // To store user's answers\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    async function fetchQuizDetails() {\n      try {\n        const quizData = await getQuizDetails(id); // Fetch quiz details (questions and answers)\n        setQuiz(quizData);\n      } catch (error) {\n        console.error('Error fetching quiz details:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchQuizDetails();\n  }, [id]);\n  const handleAnswerChange = (questionId, answerId) => {\n    // Update user's answer when they select an answer\n    setAnswers(prevAnswers => {\n      const updatedAnswers = [...prevAnswers];\n      const answerIndex = updatedAnswers.findIndex(a => a.questionId === questionId);\n      if (answerIndex === -1) {\n        updatedAnswers.push({\n          questionId,\n          answerId\n        });\n      } else {\n        updatedAnswers[answerIndex].answerId = answerId;\n      }\n      return updatedAnswers;\n    });\n  };\n  const handleSubmitQuiz = async () => {\n    try {\n      // Submit the answers for score calculation\n      const response = await submitQuizAnswers(id, answers);\n      alert(`Your score: ${response.data.score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n      alert('There was an error submitting your quiz.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), quiz.questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), question.answers.map(answer => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${question.id}`,\n          value: answer.id,\n          onChange: () => handleAnswerChange(question.id, answer.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), answer.answer_text]\n      }, answer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this))]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitQuiz,\n      children: \"Submit Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"VfEcknlwyF/zhQ5S0YauLwDpFHk=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","getQuizDetails","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","answers","setAnswers","loading","setLoading","fetchQuizDetails","quizData","error","console","handleAnswerChange","questionId","answerId","prevAnswers","updatedAnswers","answerIndex","findIndex","a","push","handleSubmitQuiz","response","submitQuizAnswers","alert","data","score","children","fileName","_jsxFileName","lineNumber","columnNumber","title","questions","map","question","className","question_text","answer","type","name","value","onChange","answer_text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // To get the quiz ID from the URL\r\nimport { getQuizDetails } from '../api'; // Assuming you have this function to fetch quiz details\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameters\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [answers, setAnswers] = useState([]); // To store user's answers\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchQuizDetails() {\r\n      try {\r\n        const quizData = await getQuizDetails(id); // Fetch quiz details (questions and answers)\r\n        setQuiz(quizData);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz details:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchQuizDetails();\r\n  }, [id]);\r\n\r\n  const handleAnswerChange = (questionId, answerId) => {\r\n    // Update user's answer when they select an answer\r\n    setAnswers((prevAnswers) => {\r\n      const updatedAnswers = [...prevAnswers];\r\n      const answerIndex = updatedAnswers.findIndex((a) => a.questionId === questionId);\r\n      if (answerIndex === -1) {\r\n        updatedAnswers.push({ questionId, answerId });\r\n      } else {\r\n        updatedAnswers[answerIndex].answerId = answerId;\r\n      }\r\n      return updatedAnswers;\r\n    });\r\n  };\r\n\r\n  const handleSubmitQuiz = async () => {\r\n    try {\r\n      // Submit the answers for score calculation\r\n      const response = await submitQuizAnswers(id, answers);\r\n      alert(`Your score: ${response.data.score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n      alert('There was an error submitting your quiz.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.title}</h1>\r\n      {quiz.questions.map((question) => (\r\n        <div key={question.id} className=\"question-card\">\r\n          <h3>{question.question_text}</h3>\r\n          {question.answers.map((answer) => (\r\n            <label key={answer.id}>\r\n              <input\r\n                type=\"radio\"\r\n                name={`question-${question.id}`}\r\n                value={answer.id}\r\n                onChange={() => handleAnswerChange(question.id, answer.id)} \r\n              />\r\n              {answer.answer_text}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <button onClick={handleSubmitQuiz}>Submit Quiz</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}