{"ast":null,"code":"// src/api.js\n\n// Send OTP to the user's email\nexport const sendOtp = async email => {\n  try {\n    const response = await fetch('http://localhost:5000/api/send-otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      }) // Send the email in the body\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send OTP');\n    }\n    const data = await response.json();\n    return data; // Return the response data (success message or error)\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n    throw error; // Rethrow error to be handled in the calling component\n  }\n};\n\n// Verify the OTP entered by the user\nexport const verifyOtp = async (email, otp) => {\n  try {\n    const response = await fetch('http://localhost:5000/api/verify-otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        otp\n      }) // Send email and OTP to verify\n    });\n    console.log(resoponse);\n    if (!response.ok) {\n      throw new Error('Invalid OTP');\n    }\n    const data = await response.json();\n    return data; // Return the response data (success message with session or error)\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error; // Rethrow error to be handled in the calling component\n  }\n};\n\n// Fetch the details of a single quiz by its ID\nexport const getQuizDetails = async quizId => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/quiz/${quizId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch quiz details');\n    }\n    return await response.json(); // Return quiz data\n  } catch (error) {\n    console.error('Error fetching quiz details:', error);\n    return []; // Return empty array if error occurs\n  }\n};\n\n// Fetch all quizzes\nexport const getQuizzes = async () => {\n  try {\n    const response = await fetch('http://localhost:5000/api/quizzes');\n    if (!response.ok) {\n      throw new Error('Failed to fetch quizzes');\n    }\n    return await response.json(); // Return quizzes data\n  } catch (error) {\n    console.error('Error fetching quizzes:', error);\n    return []; // Return an empty array if there is an error\n  }\n};\n\n// Submit quiz results\nexport const submitQuizResult = async result => {\n  try {\n    const response = await fetch('http://localhost:5000/api/submit-quiz', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(result)\n    });\n    const data = await response.json();\n    if (response.ok) {\n      console.log('Quiz submitted successfully:', data);\n    } else {\n      console.error('Error submitting quiz:', data.message || 'Unknown error');\n    }\n  } catch (error) {\n    console.error('Error submitting quiz:', error);\n  }\n};","map":{"version":3,"names":["sendOtp","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","verifyOtp","otp","log","resoponse","getQuizDetails","quizId","getQuizzes","submitQuizResult","result","message"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\n// Send OTP to the user's email\r\nexport const sendOtp = async (email) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/send-otp', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }), // Send the email in the body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to send OTP');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Return the response data (success message or error)\r\n  } catch (error) {\r\n    console.error('Error sending OTP:', error);\r\n    throw error; // Rethrow error to be handled in the calling component\r\n  }\r\n};\r\n\r\n// Verify the OTP entered by the user\r\nexport const verifyOtp = async (email, otp) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/verify-otp', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, otp }), // Send email and OTP to verify\r\n    });\r\n\r\n    console.log(resoponse)\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Invalid OTP');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Return the response data (success message with session or error)\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error);\r\n    throw error; // Rethrow error to be handled in the calling component\r\n  }\r\n};\r\n\r\n// Fetch the details of a single quiz by its ID\r\nexport const getQuizDetails = async (quizId) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:5000/api/quiz/${quizId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch quiz details');\r\n    }\r\n    return await response.json(); // Return quiz data\r\n  } catch (error) {\r\n    console.error('Error fetching quiz details:', error);\r\n    return []; // Return empty array if error occurs\r\n  }\r\n};\r\n\r\n// Fetch all quizzes\r\nexport const getQuizzes = async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/quizzes');\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch quizzes');\r\n    }\r\n    return await response.json(); // Return quizzes data\r\n  } catch (error) {\r\n    console.error('Error fetching quizzes:', error);\r\n    return []; // Return an empty array if there is an error\r\n  }\r\n};\r\n\r\n// Submit quiz results\r\nexport const submitQuizResult = async (result) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(result),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      console.log('Quiz submitted successfully:', data);\r\n    } else {\r\n      console.error('Error submitting quiz:', data.message || 'Unknown error');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error submitting quiz:', error);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}