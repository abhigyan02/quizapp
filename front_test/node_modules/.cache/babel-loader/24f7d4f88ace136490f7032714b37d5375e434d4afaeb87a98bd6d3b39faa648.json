{"ast":null,"code":"// Send OTP to the user's email\nexport const sendOtp=async email=>{try{const response=await fetch(\"\".concat(import.meta.env.REACT_APP_BACKEND_BASEURL,\"/api/send-otp\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})// Send the email in the body\n});if(!response.ok){throw new Error('Failed to send OTP');}const data=await response.json();return data;// Return the response data (success message or error)\n}catch(error){console.error('Error sending OTP:',error);throw error;// Rethrow error to be handled in the calling component\n}};// Verify the OTP entered by the user\nexport const verifyOtp=async(email,otp)=>{try{const response=await fetch(\"\".concat(import.meta.env.REACT_APP_BACKEND_BASEURL,\"/api/verify-otp\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,otp})// Send email and OTP to verify\n});console.log('Server Response Status:',response.status);// Log status code\nconst data=await response.json();// Get response JSON\n// Log full response to understand the structure\nconsole.log('Server Response Data:',data);if(!response.ok){throw new Error('Invalid OTP');// Throw error if response is not OK\n}return data;// Return the response data (success message with session or error)\n}catch(error){console.error('Error verifying OTP:',error);// Log error\nthrow error;// Rethrow the error to be handled in the calling component\n}};// Fetch the details of a single quiz by its ID\nexport const getQuizDetails=async quizId=>{try{const response=await fetch(\"\".concat(import.meta.env.REACT_APP_BACKEND_BASEURL,\"/api/quiz/\").concat(quizId));if(!response.ok){throw new Error('Failed to fetch quiz details');}return await response.json();// Return quiz data\n}catch(error){console.error('Error fetching quiz details:',error);return[];// Return empty array if error occurs\n}};// Fetch all quizzes\nexport const getQuizzes=async()=>{try{const response=await fetch(\"\".concat(import.meta.env.REACT_APP_BACKEND_BASEURL,\"/api/quizzes\"));if(!response.ok){throw new Error('Failed to fetch quizzes');}return await response.json();// Return quizzes data\n}catch(error){console.error('Error fetching quizzes:',error);return[];// Return an empty array if there is an error\n}};// Submit quiz results\nexport const submitQuizResult=async result=>{try{const response=await fetch(\"\".concat(import.meta.env.REACT_APP_BACKEND_BASEURL,\"/api/submit-quiz\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(result)});const data=await response.json();if(response.ok){console.log('Quiz submitted successfully:',data);}else{console.error('Error submitting quiz:',data.message||'Unknown error');}}catch(error){console.error('Error submitting quiz:',error);}};","map":{"version":3,"names":["sendOtp","email","response","fetch","concat","import","meta","env","REACT_APP_BACKEND_BASEURL","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","verifyOtp","otp","log","status","getQuizDetails","quizId","getQuizzes","submitQuizResult","result","message"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/api.js"],"sourcesContent":["// Send OTP to the user's email\r\nexport const sendOtp = async (email) => {\r\n  try {\r\n    const response = await fetch(`${import.meta.env.REACT_APP_BACKEND_BASEURL}/api/send-otp`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }), // Send the email in the body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to send OTP');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Return the response data (success message or error)\r\n  } catch (error) {\r\n    console.error('Error sending OTP:', error);\r\n    throw error; // Rethrow error to be handled in the calling component\r\n  }\r\n};\r\n\r\n// Verify the OTP entered by the user\r\n\r\nexport const verifyOtp = async (email, otp) => {\r\n  try {\r\n    const response = await fetch(`${import.meta.env.REACT_APP_BACKEND_BASEURL}/api/verify-otp`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, otp }), // Send email and OTP to verify\r\n    });\r\n\r\n    console.log('Server Response Status:', response.status); // Log status code\r\n    const data = await response.json(); // Get response JSON\r\n\r\n    // Log full response to understand the structure\r\n    console.log('Server Response Data:', data);\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Invalid OTP'); // Throw error if response is not OK\r\n    }\r\n\r\n    return data; // Return the response data (success message with session or error)\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error); // Log error\r\n    throw error; // Rethrow the error to be handled in the calling component\r\n  }\r\n};\r\n\r\n// Fetch the details of a single quiz by its ID\r\nexport const getQuizDetails = async (quizId) => {\r\n  try {\r\n    const response = await fetch(`${import.meta.env.REACT_APP_BACKEND_BASEURL}/api/quiz/${quizId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch quiz details');\r\n    }\r\n    return await response.json(); // Return quiz data\r\n  } catch (error) {\r\n    console.error('Error fetching quiz details:', error);\r\n    return []; // Return empty array if error occurs\r\n  }\r\n};\r\n\r\n// Fetch all quizzes\r\nexport const getQuizzes = async () => {\r\n  try {\r\n    const response = await fetch(`${import.meta.env.REACT_APP_BACKEND_BASEURL}/api/quizzes`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch quizzes');\r\n    }\r\n    return await response.json(); // Return quizzes data\r\n  } catch (error) {\r\n    console.error('Error fetching quizzes:', error);\r\n    return []; // Return an empty array if there is an error\r\n  }\r\n};\r\n\r\n// Submit quiz results\r\nexport const submitQuizResult = async (result) => {\r\n  try {\r\n    const response = await fetch(`${import.meta.env.REACT_APP_BACKEND_BASEURL}/api/submit-quiz`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(result),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      console.log('Quiz submitted successfully:', data);\r\n    } else {\r\n      console.error('Error submitting quiz:', data.message || 'Unknown error');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error submitting quiz:', error);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}