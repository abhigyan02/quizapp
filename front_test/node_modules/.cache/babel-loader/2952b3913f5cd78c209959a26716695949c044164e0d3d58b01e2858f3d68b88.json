{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = ({\n  quizData\n}) => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timer, setTimer] = useState(30);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const handleAnswerSelection = answerId => {\n    setSelectedAnswer(answerId);\n  };\n\n  // Memoizing the handleNextQuestion function to prevent unnecessary re-renders\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer) {\n      checkAnswer(selectedAnswer);\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer]);\n\n  // Function to check the selected answer and calculate the score\n  const checkAnswer = answerId => {\n    const currentQuestion = quizData[currentQuestionIndex];\n    const correctAnswer = currentQuestion.answers.find(answer => answer.is_correct);\n    if (correctAnswer && correctAnswer.id === answerId) {\n      setScore(prevScore => prevScore + currentQuestion.marks);\n    }\n  };\n\n  // Handle timer and question transitions using useEffect\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < quizData.length) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n\n      // Cleanup function to clear the interval\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quizData, handleNextQuestion]); // Added handleNextQuestion to dependencies\n\n  // Render the question and possible answers\n  if (currentQuestionIndex >= quizData.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-finished\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Finished\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your total score is: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = quizData[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers-container\",\n        children: currentQuestion.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`,\n          onClick: () => handleAnswerSelection(answer.id),\n          children: answer.answer_text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-button\",\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"6yHkoF81hKRE11KPAcpJEmjvla8=\");\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","QuizPage","quizData","_s","currentQuestionIndex","setCurrentQuestionIndex","timer","setTimer","selectedAnswer","setSelectedAnswer","score","setScore","handleAnswerSelection","answerId","handleNextQuestion","checkAnswer","prevIndex","currentQuestion","correctAnswer","answers","find","answer","is_correct","id","prevScore","marks","length","timerInterval","setInterval","prevTimer","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question_text","map","onClick","answer_text","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nconst QuizPage = ({ quizData }) => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [timer, setTimer] = useState(30);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const handleAnswerSelection = (answerId) => {\r\n    setSelectedAnswer(answerId);\r\n  };\r\n\r\n  // Memoizing the handleNextQuestion function to prevent unnecessary re-renders\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer) {\r\n      checkAnswer(selectedAnswer);\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer]);\r\n\r\n  // Function to check the selected answer and calculate the score\r\n  const checkAnswer = (answerId) => {\r\n    const currentQuestion = quizData[currentQuestionIndex];\r\n    const correctAnswer = currentQuestion.answers.find(answer => answer.is_correct);\r\n\r\n    if (correctAnswer && correctAnswer.id === answerId) {\r\n      setScore((prevScore) => prevScore + currentQuestion.marks);\r\n    }\r\n  };\r\n\r\n  // Handle timer and question transitions using useEffect\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quizData.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n\r\n      // Cleanup function to clear the interval\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quizData, handleNextQuestion]);  // Added handleNextQuestion to dependencies\r\n\r\n  // Render the question and possible answers\r\n  if (currentQuestionIndex >= quizData.length) {\r\n    return (\r\n      <div className=\"quiz-finished\">\r\n        <h2>Quiz Finished</h2>\r\n        <p>Your total score is: {score}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = quizData[currentQuestionIndex];\r\n  \r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <div className=\"question-container\">\r\n        <h2>{currentQuestion.question_text}</h2>\r\n        <div className=\"timer\">Time left: {timer}s</div>\r\n\r\n        <div className=\"answers-container\">\r\n          {currentQuestion.answers.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`}\r\n              onClick={() => handleAnswerSelection(answer.id)}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        \r\n        <button className=\"next-button\" onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n          Next Question\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}