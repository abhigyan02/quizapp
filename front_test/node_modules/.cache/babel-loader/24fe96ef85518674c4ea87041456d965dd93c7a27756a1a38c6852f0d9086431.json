{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for each question\n  const navigate = useNavigate(); // Initialize navigate\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        const data = await response.json();\n        console.log('Quiz Data:', data); // Log the data to see what is returned\n        setQuiz(data);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const correctAnswer = question === null || question === void 0 ? void 0 : question.answer_options.find(answer => answer.is_correct);\n\n    // If the answer is correct, add it to the selected answers\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setSelectedAnswers(prev => ({\n        ...prev,\n        [quiz.questions[currentQuestionIndex].id]: answerId\n      }));\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer !== null) {\n      setSelectedAnswers(prev => ({\n        ...prev,\n        [quiz.questions[currentQuestionIndex].id]: selectedAnswer\n      })); // Store the selected answer for the current question\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer, checkAnswer, quiz, currentQuestionIndex]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Function to get all answers selected by the user\n  const getAnswers = () => {\n    return quiz === null || quiz === void 0 ? void 0 : quiz.questions.map(question => ({\n      questionId: question.id,\n      selectedOption: selectedAnswers[question.id] // Get the answer for each question\n    }));\n  };\n\n  // Submit quiz to the server (only sends answers)\n  const submitQuiz = async () => {\n    try {\n      // Send answers to the server\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: quiz === null || quiz === void 0 ? void 0 : quiz.userId,\n          // Assuming this is coming from the quiz data\n          otp: quiz === null || quiz === void 0 ? void 0 : quiz.otp,\n          // Assuming OTP is needed for submission\n          quizId: id,\n          answers: getAnswers()\n        }),\n        credentials: 'include' // Ensure cookies (session) are sent with the request\n      });\n      const data = await response.json();\n      if (data.score !== undefined) {\n        console.log(\"Score:\", data.score);\n        navigate(`/quiz/result/${id}`, {\n          state: {\n            score: data.score\n          } // Pass the score to the result page\n        });\n      } else {\n        console.error('Score not found in response.');\n      }\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this);\n  }\n  if (!(quiz !== null && quiz !== void 0 && quiz.questions) || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available for this quiz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answer_options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.answer_text ? 'selected' : ''}`,\n          onClick: () => {\n            setSelectedAnswer(answer.answer_text); // Update selected answer for current question\n          },\n          children: answer.answer_text\n        }, answer.answer_text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"HWVzMx1vCnGqoq+p5z2Ad4kouIE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","selectedAnswers","setSelectedAnswers","navigate","fetchQuizData","response","fetch","data","json","console","log","error","checkAnswer","answerId","question","questions","correctAnswer","answer_options","find","answer","is_correct","prev","handleNextQuestion","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","getAnswers","map","questionId","selectedOption","submitQuiz","method","headers","body","JSON","stringify","userId","otp","quizId","answers","credentials","score","undefined","state","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","answer_text","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for each question\r\n  const navigate = useNavigate(); // Initialize navigate\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        const data = await response.json();\r\n        console.log('Quiz Data:', data); // Log the data to see what is returned\r\n        setQuiz(data);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz?.questions[currentQuestionIndex];\r\n    const correctAnswer = question?.answer_options.find((answer) => answer.is_correct);\r\n\r\n    // If the answer is correct, add it to the selected answers\r\n    if (correctAnswer?.id === answerId) {\r\n      setSelectedAnswers((prev) => ({\r\n        ...prev,\r\n        [quiz.questions[currentQuestionIndex].id]: answerId,\r\n      }));\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer !== null) {\r\n      setSelectedAnswers((prev) => ({\r\n        ...prev,\r\n        [quiz.questions[currentQuestionIndex].id]: selectedAnswer,\r\n      })); // Store the selected answer for the current question\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer, checkAnswer, quiz, currentQuestionIndex]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Function to get all answers selected by the user\r\n  const getAnswers = () => {\r\n    return quiz?.questions.map((question) => ({\r\n      questionId: question.id,\r\n      selectedOption: selectedAnswers[question.id], // Get the answer for each question\r\n    }));\r\n  };\r\n\r\n  // Submit quiz to the server (only sends answers)\r\n  const submitQuiz = async () => {\r\n    try {\r\n      // Send answers to the server\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          userId: quiz?.userId, // Assuming this is coming from the quiz data\r\n          otp: quiz?.otp,  // Assuming OTP is needed for submission\r\n          quizId: id,\r\n          answers: getAnswers(),\r\n        }),\r\n        credentials: 'include',  // Ensure cookies (session) are sent with the request\r\n      });\r\n      const data = await response.json();\r\n      if (data.score !== undefined) {\r\n        console.log(\"Score:\", data.score);\r\n        navigate(`/quiz/result/${id}`, {\r\n          state: { score: data.score }, // Pass the score to the result page\r\n        });\r\n      } else {\r\n        console.error('Score not found in response.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n  \r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (!quiz?.questions || quiz.questions.length === 0) {\r\n    return <div>No questions available for this quiz.</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answer_options.map((answer) => (\r\n            <div\r\n              key={answer.answer_text}\r\n              className={`answer-option ${selectedAnswer === answer.answer_text ? 'selected' : ''}`}\r\n              onClick={() => {\r\n                setSelectedAnswer(answer.answer_text); // Update selected answer for current question\r\n              }}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}