{"ast":null,"code":"// src/api.js\n\n// Send OTP to the user's email\nexport const sendOtp = async email => {\n  try {\n    const response = await fetch('http://localhost:5000/api/send-otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email\n      }) // Send the email in the body\n    });\n    if (!response.ok) {\n      throw new Error('Failed to send OTP');\n    }\n    const data = await response.json();\n    return data; // Return the response data (success message or error)\n  } catch (error) {\n    console.error('Error sending OTP:', error);\n    throw error; // Rethrow error to be handled in the calling component\n  }\n};\n\n// Verify the OTP entered by the user\nexport const verifyOtp = async (email, otp) => {\n  try {\n    const response = await fetch('http://localhost:5000/api/verify-otp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        otp\n      }) // Send email and OTP to verify\n    });\n    if (!response.ok) {\n      throw new Error('Invalid OTP');\n    }\n    const data = await response.json();\n    return data; // Return the response data (success message with session or error)\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error; // Rethrow error to be handled in the calling component\n  }\n};","map":{"version":3,"names":["sendOtp","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","verifyOtp","otp"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/api.js"],"sourcesContent":["// src/api.js\r\n\r\n// Send OTP to the user's email\r\nexport const sendOtp = async (email) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/send-otp', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email }), // Send the email in the body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to send OTP');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Return the response data (success message or error)\r\n  } catch (error) {\r\n    console.error('Error sending OTP:', error);\r\n    throw error; // Rethrow error to be handled in the calling component\r\n  }\r\n};\r\n\r\n// Verify the OTP entered by the user\r\nexport const verifyOtp = async (email, otp) => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/api/verify-otp', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, otp }), // Send email and OTP to verify\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Invalid OTP');\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data; // Return the response data (success message with session or error)\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error);\r\n    throw error; // Rethrow error to be handled in the calling component\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,OAAO,GAAG,MAAOC,KAAK,IAAK;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC,CAAC,CAAE;IACnC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAOd,KAAK,EAAEe,GAAG,KAAK;EAC7C,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP,KAAK;QAAEe;MAAI,CAAC,CAAC,CAAE;IACxC,CAAC,CAAC;IAEF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;IAChC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}