{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL\n  const navigate = useNavigate(); // Hook for navigation\n  const [quiz, setQuiz] = useState(null); // Store quiz data\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds)\n  const [score, setScore] = useState(0); // Total score\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\n\n  // Store answers for each question\n  const [userAnswers, setUserAnswers] = useState([]);\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        if (!response.ok) {\n          throw new Error('Quiz not found or error fetching quiz data.');\n        }\n        const data = await response.json();\n        setQuiz(data); // Set quiz data\n      } catch (error) {\n        console.error('Error during fetch:', error);\n        alert(error.message); // Show a meaningful error message\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent unnecessary re-creations\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const correctAnswer = question === null || question === void 0 ? void 0 : question.answer_options.find(answer => answer.is_correct);\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n      setIsAnswerCorrect(true); // Correct answer\n    } else {\n      setIsAnswerCorrect(false); // Incorrect answer\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Handle the next question\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer !== null) {\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setUserAnswers(prevAnswers => [...prevAnswers, {\n        questionId: quiz.questions[currentQuestionIndex].id,\n        answerId: selectedAnswer\n      }]);\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer, checkAnswer, currentQuestionIndex, quiz]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to the next question when the timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Collect the selected answers for the quiz\n  const getAnswers = () => {\n    return userAnswers.map(answer => ({\n      questionId: answer.questionId,\n      answerId: answer.answerId\n    }));\n  };\n\n  // Submit the quiz to the server\n  const submitQuiz = async () => {\n    if (currentQuestionIndex !== (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      alert(`Your score: ${score}`);\n      navigate(`/quiz-results/${id}`); // Redirect to results page\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n  if (!quiz || !quiz.questions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers-container\",\n      children: currentQuestion !== null && currentQuestion !== void 0 && currentQuestion.answer_options && currentQuestion.answer_options.length > 0 ? currentQuestion.answer_options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-option-column\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `answer-option\n                  ${selectedAnswer === option.answer_text ? 'selected' : ''}\n                  ${isAnswerCorrect !== null ? option.is_correct ? 'correct' : 'incorrect' : ''}\n                `,\n          onClick: () => {\n            if (isAnswerCorrect === null) {\n              setSelectedAnswer(option.answer_text);\n            }\n          },\n          children: option.answer_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, this)\n      }, `${currentQuestion.id}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No options available for this question.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [\"Time left: \", timer, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNextQuestion,\n      className: \"next-button\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), isAnswerCorrect !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-feedback\",\n      children: isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"3g2qJH9LVI+ld3qy8DWCNYkheqQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","id","navigate","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","isAnswerCorrect","setIsAnswerCorrect","userAnswers","setUserAnswers","fetchQuizData","response","fetch","ok","Error","data","json","error","console","alert","message","checkAnswer","answerId","question","questions","correctAnswer","answer_options","find","answer","is_correct","prevScore","marks","handleNextQuestion","prevAnswers","questionId","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","getAnswers","map","submitQuiz","method","headers","body","JSON","stringify","quizId","answers","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","title","question_text","option","index","answer_text","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [quiz, setQuiz] = useState(null); // Store quiz data\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\r\n\r\n  // Store answers for each question\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        if (!response.ok) {\r\n          throw new Error('Quiz not found or error fetching quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        setQuiz(data); // Set quiz data\r\n      } catch (error) {\r\n        console.error('Error during fetch:', error);\r\n        alert(error.message); // Show a meaningful error message\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent unnecessary re-creations\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz?.questions[currentQuestionIndex];\r\n    const correctAnswer = question?.answer_options.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer?.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n      setIsAnswerCorrect(true); // Correct answer\r\n    } else {\r\n      setIsAnswerCorrect(false); // Incorrect answer\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Handle the next question\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer !== null) {\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setUserAnswers((prevAnswers) => [\r\n        ...prevAnswers,\r\n        { questionId: quiz.questions[currentQuestionIndex].id, answerId: selectedAnswer },\r\n      ]);\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to the next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer, checkAnswer, currentQuestionIndex, quiz]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to the next question when the timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Collect the selected answers for the quiz\r\n  const getAnswers = () => {\r\n    return userAnswers.map((answer) => ({\r\n      questionId: answer.questionId,\r\n      answerId: answer.answerId,\r\n    }));\r\n  };\r\n\r\n  // Submit the quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (currentQuestionIndex !== quiz?.questions.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      alert(`Your score: ${score}`);\r\n      navigate(`/quiz-results/${id}`); // Redirect to results page\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  if (!quiz || !quiz.questions) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <h1>{quiz.title}</h1>\r\n      <h2>{currentQuestion?.question_text}</h2>\r\n\r\n      <div className=\"answers-container\">\r\n        {currentQuestion?.answer_options && currentQuestion.answer_options.length > 0 ? (\r\n          currentQuestion.answer_options.map((option, index) => (\r\n            <div key={`${currentQuestion.id}-${index}`} className=\"answer-option-column\">\r\n              <button\r\n                className={`answer-option\r\n                  ${selectedAnswer === option.answer_text ? 'selected' : ''}\r\n                  ${isAnswerCorrect !== null ? (option.is_correct ? 'correct' : 'incorrect') : ''}\r\n                `}\r\n                onClick={() => {\r\n                  if (isAnswerCorrect === null) {\r\n                    setSelectedAnswer(option.answer_text);\r\n                  }\r\n                }}\r\n              >\r\n                {option.answer_text}\r\n              </button>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div>No options available for this question.</div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"timer\">Time left: {timer}s</div>\r\n\r\n      <button onClick={handleNextQuestion} className=\"next-button\">Next</button>\r\n\r\n      {isAnswerCorrect !== null && (\r\n        <div className=\"answer-feedback\">\r\n          {isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}