{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // For navigation and params\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL\n  const navigate = useNavigate(); // Hook for navigation\n  const [quiz, setQuiz] = useState(null); // Store quiz data\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds)\n  const [score, setScore] = useState(0); // Total score\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        if (!response.ok) {\n          throw new Error('Quiz not found or error fetching quiz data.');\n        }\n        const data = await response.json();\n        console.log(\"Quiz Data:\", data); // Log the quiz data to verify the structure\n        setQuiz(data); // Set quiz data\n      } catch (error) {\n        console.error('Error during fetch:', error);\n        alert(error.message); // Show a meaningful error message\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent unnecessary re-creations\n  const checkAnswer = useCallback(answerId => {\n    const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const correctAnswer = currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options.find(answer => answer.is_correct);\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setScore(prevScore => prevScore + currentQuestion.marks);\n      setIsAnswerCorrect(true); // Correct answer\n    } else {\n      setIsAnswerCorrect(false); // Incorrect answer\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Handle the next question\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer !== null) {\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    var _quiz$questions;\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : (_quiz$questions = quiz.questions) === null || _quiz$questions === void 0 ? void 0 : _quiz$questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to the next question when the timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit the quiz to the server\n  const submitQuiz = async () => {\n    var _quiz$questions2;\n    if (currentQuestionIndex !== (quiz === null || quiz === void 0 ? void 0 : (_quiz$questions2 = quiz.questions) === null || _quiz$questions2 === void 0 ? void 0 : _quiz$questions2.length)) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n\n      // Navigate to the results page after submission\n      alert(`Your score: ${score}`);\n      navigate(`/quiz-results/${id}`); // Redirect to results page\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend\n  const getAnswers = () => {\n    return quiz === null || quiz === void 0 ? void 0 : quiz.questions.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswer\n    }));\n  };\n  if (!quiz || !quiz.questions || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 12\n    }, this); // Show loading while quiz data is being fetched\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz === null || quiz === void 0 ? void 0 : quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-options\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`,\n          onClick: () => setSelectedAnswer(answer.id) // Handle selecting an answer\n          ,\n          children: answer.text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next-button\",\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), isAnswerCorrect !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-feedback\",\n      children: isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"Wq4xPVOgZjGtB9IIkR9OyN0zMWQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","id","navigate","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","isAnswerCorrect","setIsAnswerCorrect","fetchQuizData","response","fetch","ok","Error","data","json","console","log","error","alert","message","checkAnswer","answerId","currentQuestion","questions","correctAnswer","options","find","answer","is_correct","prevScore","marks","handleNextQuestion","prevIndex","_quiz$questions","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","_quiz$questions2","method","headers","body","JSON","stringify","quizId","answers","getAnswers","map","question","questionId","children","fileName","_jsxFileName","lineNumber","columnNumber","className","quiz_title","question_text","onClick","text","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // For navigation and params\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [quiz, setQuiz] = useState(null); // Store quiz data\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        if (!response.ok) {\r\n          throw new Error('Quiz not found or error fetching quiz data.');\r\n        }\r\n        const data = await response.json();\r\n        console.log(\"Quiz Data:\", data);  // Log the quiz data to verify the structure\r\n        setQuiz(data); // Set quiz data\r\n      } catch (error) {\r\n        console.error('Error during fetch:', error);\r\n        alert(error.message); // Show a meaningful error message\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent unnecessary re-creations\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n    const correctAnswer = currentQuestion?.options.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer?.id === answerId) {\r\n      setScore((prevScore) => prevScore + currentQuestion.marks);\r\n      setIsAnswerCorrect(true); // Correct answer\r\n    } else {\r\n      setIsAnswerCorrect(false); // Incorrect answer\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Handle the next question\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer !== null) {\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to the next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions?.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to the next question when the timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit the quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (currentQuestionIndex !== quiz?.questions?.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n\r\n      // Navigate to the results page after submission\r\n      alert(`Your score: ${score}`);\r\n      navigate(`/quiz-results/${id}`); // Redirect to results page\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend\r\n  const getAnswers = () => {\r\n    return quiz?.questions.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswer,\r\n    }));\r\n  };\r\n\r\n  if (!quiz || !quiz.questions || quiz.questions.length === 0) {\r\n    return <div>Loading quiz...</div>; // Show loading while quiz data is being fetched\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <h1>{quiz?.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div className=\"question-container\">\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div className=\"timer\">Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answer-options\">\r\n          {currentQuestion?.options.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`}\r\n              onClick={() => setSelectedAnswer(answer.id)} // Handle selecting an answer\r\n            >\r\n              {answer.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div className=\"next-button\">\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Feedback for the selected answer */}\r\n      {isAnswerCorrect !== null && (\r\n        <div className=\"answer-feedback\">\r\n          {isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}