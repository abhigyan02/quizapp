{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  var _quiz$;\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [answers, setAnswers] = useState([]); // Track the user's selected answers\n  const [userId, setUserId] = useState(null); // Track the logged-in user\n  const [otp, setOtp] = useState(''); // OTP input by user\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n      const data = await response.json();\n      setQuiz(data);\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Handle answer change (Assumes answers are in a simple format like [{ questionId, answerId }])\n  const handleAnswerChange = (questionId, answerId) => {\n    setAnswers(prevAnswers => {\n      const index = prevAnswers.findIndex(ans => ans.questionId === questionId);\n      if (index >= 0) {\n        // Update the existing answer for the question\n        prevAnswers[index].answerId = answerId;\n      } else {\n        // Add new answer for the question\n        prevAnswers.push({\n          questionId,\n          answerId\n        });\n      }\n      return [...prevAnswers];\n    });\n  };\n\n  // Function to submit quiz\n  const submitQuiz = async () => {\n    if (!userId || !otp || !answers.length) {\n      alert('Please fill all fields and answer all questions.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          otp,\n          quizId: id,\n          answers\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n      alert(`Your score: ${data.score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_quiz$ = quiz[0]) === null || _quiz$ === void 0 ? void 0 : _quiz$.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: quiz.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: question.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), question.answers.map(answer => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: question.id,\n            value: answer.id,\n            onChange: () => handleAnswerChange(question.id, answer.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this), answer.answer_text]\n        }, answer.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"User ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userId || '',\n          onChange: e => setUserId(e.target.value),\n          placeholder: \"Enter your User ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"OTP:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          placeholder: \"Enter your OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitQuiz,\n      children: \"Submit Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"zWu6zUXhE/pICfa6iLVGWjeh/Tk=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","QuizPage","_s","_quiz$","id","quiz","setQuiz","answers","setAnswers","userId","setUserId","otp","setOtp","fetchQuizData","response","fetch","data","json","handleAnswerChange","questionId","answerId","prevAnswers","index","findIndex","ans","push","submitQuiz","length","alert","method","headers","body","JSON","stringify","quizId","console","log","message","score","error","children","fileName","_jsxFileName","lineNumber","columnNumber","quiz_title","map","question","question_text","answer","type","name","value","onChange","answer_text","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [answers, setAnswers] = useState([]); // Track the user's selected answers\r\n  const [userId, setUserId] = useState(null); // Track the logged-in user\r\n  const [otp, setOtp] = useState(''); // OTP input by user\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n      const data = await response.json();\r\n      setQuiz(data);\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Handle answer change (Assumes answers are in a simple format like [{ questionId, answerId }])\r\n  const handleAnswerChange = (questionId, answerId) => {\r\n    setAnswers((prevAnswers) => {\r\n      const index = prevAnswers.findIndex((ans) => ans.questionId === questionId);\r\n      if (index >= 0) {\r\n        // Update the existing answer for the question\r\n        prevAnswers[index].answerId = answerId;\r\n      } else {\r\n        // Add new answer for the question\r\n        prevAnswers.push({ questionId, answerId });\r\n      }\r\n      return [...prevAnswers];\r\n    });\r\n  };\r\n\r\n  // Function to submit quiz\r\n  const submitQuiz = async () => {\r\n    if (!userId || !otp || !answers.length) {\r\n      alert('Please fill all fields and answer all questions.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, otp, quizId: id, answers }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      alert(`Your score: ${data.score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz[0]?.quiz_title}</h1>\r\n      <div>\r\n        {/* Display the quiz questions and possible answers */}\r\n        {quiz.map((question) => (\r\n          <div key={question.id}>\r\n            <h3>{question.question_text}</h3>\r\n            {question.answers.map((answer) => (\r\n              <label key={answer.id}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={question.id}\r\n                  value={answer.id}\r\n                  onChange={() => handleAnswerChange(question.id, answer.id)}\r\n                />\r\n                {answer.answer_text}\r\n              </label>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div>\r\n        <label>\r\n          User ID:\r\n          <input\r\n            type=\"text\"\r\n            value={userId || ''}\r\n            onChange={(e) => setUserId(e.target.value)}\r\n            placeholder=\"Enter your User ID\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          OTP:\r\n          <input\r\n            type=\"text\"\r\n            value={otp}\r\n            onChange={(e) => setOtp(e.target.value)}\r\n            placeholder=\"Enter your OTP\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      <button onClick={submitQuiz}>Submit Quiz</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}