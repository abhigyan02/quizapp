{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for each question\n  const [marks, setMarks] = useState(0); // Track total marks\n  const [timer, setTimer] = useState(30); // Timer for each question\n  const [userId, setUserId] = useState(null); // Store userId\n  const [session_id, setSessionId] = useState(null); // Store session_id\n  const navigate = useNavigate(); // Initialize navigate\n\n  // Fetch user details (userId and session_id) from the backend\n  useEffect(() => {\n    const fetchUserDetails = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/get-user-details', {\n          method: 'GET',\n          credentials: 'include' // To send session cookie with the request\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setUserId(data.userId);\n          setSessionId(data.sessionId);\n          na;\n        } else {\n          alert('Session expired or user not logged in');\n          navigate('/'); // Redirect to login page if user is not logged in\n        }\n      } catch (error) {\n        console.error('Error fetching user details:', error);\n        alert('Error fetching user details. Please try again.');\n        navigate('/'); // Redirect to login page on error\n      }\n    };\n    fetchUserDetails();\n  }, [navigate]); // Only run this once when component mounts\n\n  // Validate session_id and userId before proceeding\n  useEffect(() => {\n    if (!session_id || !userId) {\n      alert('Session or User ID not found. Please log in again.');\n      navigate('/'); // Redirect to login page if session/userId is missing\n    }\n  }, [session_id, userId, navigate]);\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        const data = await response.json();\n        console.log('Quiz Data:', data); // Log the data to see what is returned\n        setQuiz(data);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const correctAnswer = question === null || question === void 0 ? void 0 : question.answer_options.find(answer => answer.is_correct);\n\n    // If the answer is correct, increment marks\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setMarks(prevMarks => prevMarks + 1);\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Function to get all answers selected by the user in the required format\n  const getAnswers = () => {\n    // Log the selected answers when the user clicks next or submit\n    console.log('Selected Answers:', selectedAnswers);\n    return quiz === null || quiz === void 0 ? void 0 : quiz.questions.map(question => ({\n      questionId: question.id,\n      selectedOption: selectedAnswers[question.id] // Get the selected answer for each question\n    }));\n  };\n\n  // Handle answer click\n  const handleAnswerClick = (answerText, questionId) => {\n    setSelectedAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [questionId]: answerText // Store answer by question ID\n    }));\n    console.log('Selected answer:', answerText);\n  };\n\n  // Handle next question\n  const handleNextQuestion = useCallback(() => {\n    const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    if (selectedAnswers[currentQuestion.id]) {\n      checkAnswer(selectedAnswers[currentQuestion.id]);\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setTimer(30); // Reset timer for next question\n    }\n  }, [currentQuestionIndex, selectedAnswers, quiz, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit the quiz\n  const submitQuiz = async () => {\n    const answers = getAnswers(); // Gather the answers in the format [{questionId, selectedOption}]\n\n    const requestBody = {\n      quizId: quiz.id,\n      // Pass the quiz ID\n      userId,\n      // Pass userId (now fetched from backend)\n      answers // Pass the answers array\n    };\n    console.log('Request Body:', requestBody); // Log the request body\n\n    try {\n      // Send the quiz data (quizId and answers) to the backend\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${session_id}` // Pass session_id in Authorization header\n        },\n        credentials: 'include',\n        // To send the session cookie\n        body: JSON.stringify(requestBody) // Send the request body as JSON\n      });\n      const data = await response.json(); // Parse the response JSON\n\n      if (data.message === 'Quiz submitted successfully') {\n        console.log(data);\n        console.log('Score:', data.score);\n        alert(`Your score is: ${data.score}`); // Display the score\n      } else {\n        alert('There was an issue with your submission.');\n      }\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n      alert('Error submitting your quiz. Please try again.');\n    }\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  }\n  if (!(quiz !== null && quiz !== void 0 && quiz.questions) || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available for this quiz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answer_options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}`,\n          onClick: () => handleAnswerClick(answer.answer_text, currentQuestion.id) // Handle answer click\n          ,\n          children: answer.answer_text\n        }, answer.answer_text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswers[currentQuestion.id],\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"LUZMnKnCRnKe8Jf+Dl1qcwSWAtQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","marks","setMarks","timer","setTimer","userId","setUserId","session_id","setSessionId","navigate","fetchUserDetails","response","fetch","method","credentials","ok","data","json","sessionId","na","alert","error","console","fetchQuizData","log","checkAnswer","answerId","question","questions","correctAnswer","answer_options","find","answer","is_correct","prevMarks","getAnswers","map","questionId","selectedOption","handleAnswerClick","answerText","prevAnswers","handleNextQuestion","currentQuestion","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","answers","requestBody","quizId","headers","Authorization","body","JSON","stringify","message","score","children","fileName","_jsxFileName","lineNumber","columnNumber","quiz_title","question_text","className","answer_text","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for each question\r\n  const [marks, setMarks] = useState(0); // Track total marks\r\n  const [timer, setTimer] = useState(30); // Timer for each question\r\n  const [userId, setUserId] = useState(null); // Store userId\r\n  const [session_id, setSessionId] = useState(null); // Store session_id\r\n  const navigate = useNavigate(); // Initialize navigate\r\n\r\n  // Fetch user details (userId and session_id) from the backend\r\n  useEffect(() => {\r\n    const fetchUserDetails = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/get-user-details', {\r\n          method: 'GET',\r\n          credentials: 'include', // To send session cookie with the request\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setUserId(data.userId);\r\n          setSessionId(data.sessionId);\r\n          na\r\n        } else {\r\n          alert('Session expired or user not logged in');\r\n          navigate('/'); // Redirect to login page if user is not logged in\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user details:', error);\r\n        alert('Error fetching user details. Please try again.');\r\n        navigate('/'); // Redirect to login page on error\r\n      }\r\n    };\r\n\r\n    fetchUserDetails();\r\n  }, [navigate]); // Only run this once when component mounts\r\n\r\n  // Validate session_id and userId before proceeding\r\n  useEffect(() => {\r\n    if (!session_id || !userId) {\r\n      alert('Session or User ID not found. Please log in again.');\r\n      navigate('/');  // Redirect to login page if session/userId is missing\r\n    }\r\n  }, [session_id, userId, navigate]);\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        const data = await response.json();\r\n        console.log('Quiz Data:', data); // Log the data to see what is returned\r\n        setQuiz(data);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz?.questions[currentQuestionIndex];\r\n    const correctAnswer = question?.answer_options.find((answer) => answer.is_correct);\r\n\r\n    // If the answer is correct, increment marks\r\n    if (correctAnswer?.id === answerId) {\r\n      setMarks((prevMarks) => prevMarks + 1);\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Function to get all answers selected by the user in the required format\r\n  const getAnswers = () => {\r\n    // Log the selected answers when the user clicks next or submit\r\n    console.log('Selected Answers:', selectedAnswers);\r\n    \r\n    return quiz?.questions.map((question) => ({\r\n      questionId: question.id,\r\n      selectedOption: selectedAnswers[question.id],  // Get the selected answer for each question\r\n    }));\r\n  };\r\n\r\n  // Handle answer click\r\n  const handleAnswerClick = (answerText, questionId) => {\r\n    setSelectedAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: answerText,  // Store answer by question ID\r\n    }));\r\n    console.log('Selected answer:', answerText);\r\n  };\r\n\r\n  // Handle next question\r\n  const handleNextQuestion = useCallback(() => {\r\n    const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n    if (selectedAnswers[currentQuestion.id]) {\r\n      checkAnswer(selectedAnswers[currentQuestion.id]);\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n      setTimer(30); // Reset timer for next question\r\n    }\r\n  }, [currentQuestionIndex, selectedAnswers, quiz, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit the quiz\r\n  const submitQuiz = async () => {\r\n    const answers = getAnswers();  // Gather the answers in the format [{questionId, selectedOption}]\r\n    \r\n    const requestBody = {\r\n      quizId: quiz.id,   // Pass the quiz ID\r\n      userId,            // Pass userId (now fetched from backend)\r\n      answers,           // Pass the answers array\r\n    };\r\n\r\n    console.log('Request Body:', requestBody);  // Log the request body\r\n\r\n    try {\r\n      // Send the quiz data (quizId and answers) to the backend\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${session_id}`, // Pass session_id in Authorization header\r\n        },\r\n        credentials: 'include',  // To send the session cookie\r\n        body: JSON.stringify(requestBody), // Send the request body as JSON\r\n      });\r\n\r\n      const data = await response.json();  // Parse the response JSON\r\n\r\n      if (data.message === 'Quiz submitted successfully') {\r\n        console.log(data);\r\n        console.log('Score:', data.score);\r\n        alert(`Your score is: ${data.score}`);  // Display the score\r\n      } else {\r\n        alert('There was an issue with your submission.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n      alert('Error submitting your quiz. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (!quiz?.questions || quiz.questions.length === 0) {\r\n    return <div>No questions available for this quiz.</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answer_options.map((answer) => (\r\n            <div\r\n              key={answer.answer_text}\r\n              className={`answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}`}\r\n              onClick={() => handleAnswerClick(answer.answer_text, currentQuestion.id)} // Handle answer click\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswers[currentQuestion.id]}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}