{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  var _quiz$;\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Store selected answers for all questions\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n  const [userId, setUserId] = useState(null); // Track the logged-in user (get this from context or auth)\n  const [otp, setOtp] = useState(''); // OTP input by user\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n      const data = await response.json();\n      setQuiz(data);\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback((questionId, answerId) => {\n    const question = quiz.find(q => q.id === questionId);\n    const correctAnswer = question.answers.find(answer => answer.is_correct);\n    if (correctAnswer.id === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n    }\n  }, [quiz]);\n\n  // Handle next question\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswers[currentQuestionIndex] !== undefined) {\n      checkAnswer(currentQuestionIndex, selectedAnswers[currentQuestionIndex]); // Check if the selected answer is correct\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswers, currentQuestionIndex, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          otp,\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      alert(`Quiz submitted successfully! Your score: ${score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return Object.keys(selectedAnswers).map(questionId => ({\n      questionId: parseInt(questionId),\n      answerId: selectedAnswers[questionId]\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_quiz$ = quiz[0]) === null || _quiz$ === void 0 ? void 0 : _quiz$.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswers[currentQuestionIndex] === answer.id ? 'selected' : ''}`,\n          onClick: () => {\n            setSelectedAnswers(prev => ({\n              ...prev,\n              [currentQuestionIndex]: answer.id\n            }));\n          } // Handle selecting an answer\n          ,\n          children: answer.answer_text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: selectedAnswers[currentQuestionIndex] === undefined,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"Lszvc8Hh76G3Jn2XMYjKSeQa9Zg=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","jsxDEV","_jsxDEV","QuizPage","_s","_quiz$","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","timer","setTimer","score","setScore","userId","setUserId","otp","setOtp","fetchQuizData","response","fetch","data","json","checkAnswer","questionId","answerId","question","find","q","correctAnswer","answers","answer","is_correct","prevScore","marks","handleNextQuestion","undefined","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","alert","method","headers","body","JSON","stringify","quizId","getAnswers","error","console","Object","keys","map","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","onClick","prev","answer_text","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Store selected answers for all questions\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [userId, setUserId] = useState(null); // Track the logged-in user (get this from context or auth)\r\n  const [otp, setOtp] = useState(''); // OTP input by user\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n      const data = await response.json();\r\n      setQuiz(data);\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((questionId, answerId) => {\r\n    const question = quiz.find((q) => q.id === questionId);\r\n    const correctAnswer = question.answers.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n    }\r\n  }, [quiz]);\r\n\r\n  // Handle next question\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswers[currentQuestionIndex] !== undefined) {\r\n      checkAnswer(currentQuestionIndex, selectedAnswers[currentQuestionIndex]); // Check if the selected answer is correct\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswers, currentQuestionIndex, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, otp, quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      alert(`Quiz submitted successfully! Your score: ${score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return Object.keys(selectedAnswers).map((questionId) => ({\r\n      questionId: parseInt(questionId),\r\n      answerId: selectedAnswers[questionId],\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz[0]?.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answers.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswers[currentQuestionIndex] === answer.id ? 'selected' : ''}`}\r\n              onClick={() => {\r\n                setSelectedAnswers((prev) => ({\r\n                  ...prev,\r\n                  [currentQuestionIndex]: answer.id,\r\n                }));\r\n              }} // Handle selecting an answer\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={selectedAnswers[currentQuestionIndex] === undefined}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}