{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\ni;\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  var _quiz$;\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n  const [userId, setUserId] = useState(null); // Track the logged-in user\n  const [otp, setOtp] = useState(''); // OTP input by user\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n      const data = await response.json();\n      setQuiz(data);\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz[currentQuestionIndex];\n    const correctAnswer = question.answers.find(answer => answer.is_correct);\n    if (correctAnswer.id === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer !== null) {\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]); // Added handleNextQuestion to the dependencies\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          otp,\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n      alert(`Your score: ${score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return quiz.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswer\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_quiz$ = quiz[0]) === null || _quiz$ === void 0 ? void 0 : _quiz$.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`,\n          onClick: () => setSelectedAnswer(answer.id) // Handle selecting an answer\n          ,\n          children: answer.answer_text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"cCoz2o52ySF+XZVPfWZhA+ks2yE=\", true);\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["i","jsxDEV","_jsxDEV","QuizPage","_s","_quiz$","id","useParams","quiz","setQuiz","useState","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","userId","setUserId","otp","setOtp","useEffect","fetchQuizData","response","fetch","data","json","checkAnswer","useCallback","answerId","question","correctAnswer","answers","find","answer","is_correct","prevScore","marks","handleNextQuestion","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","alert","method","headers","body","JSON","stringify","quizId","getAnswers","console","log","message","error","map","questionId","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","onClick","answer_text","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["i\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [userId, setUserId] = useState(null); // Track the logged-in user\r\n  const [otp, setOtp] = useState(''); // OTP input by user\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n      const data = await response.json();\r\n      setQuiz(data);\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz[currentQuestionIndex];\r\n    const correctAnswer = question.answers.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer !== null) {\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]); // Added handleNextQuestion to the dependencies\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, otp, quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      alert(`Your score: ${score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return quiz.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswer,\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz[0]?.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answers.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`}\r\n              onClick={() => setSelectedAnswer(answer.id)} // Handle selecting an answer\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}