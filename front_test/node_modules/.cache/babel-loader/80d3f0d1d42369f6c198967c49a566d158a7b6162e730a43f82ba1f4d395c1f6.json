{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  var _quiz$;\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n  const [userId, setUserId] = useState(null); // Track the logged-in user\n  const [otp, setOtp] = useState(''); // OTP input by user\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n      const data = await response.json();\n      setQuiz(data);\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Handle answer change (select answer for the current question)\n  const handleAnswerChange = answerId => {\n    setSelectedAnswer(answerId);\n  };\n\n  // Handle next question (after answering)\n  const handleNextQuestion = () => {\n    if (selectedAnswer) {\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  };\n\n  // Check answer correctness and update score\n  const checkAnswer = answerId => {\n    const question = quiz[currentQuestionIndex];\n    const correctAnswer = question.answers.find(answer => answer.is_correct);\n    if (correctAnswer.id === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n    }\n  };\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < quiz.length) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz]);\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          otp,\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n      alert(`Your score: ${score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return quiz.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswer\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_quiz$ = quiz[0]) === null || _quiz$ === void 0 ? void 0 : _quiz$.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`,\n          onClick: () => handleAnswerChange(answer.id),\n          children: answer.answer_text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"User ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userId || '',\n          onChange: e => setUserId(e.target.value),\n          placeholder: \"Enter your User ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"OTP:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: otp,\n          onChange: e => setOtp(e.target.value),\n          placeholder: \"Enter your OTP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"zxqKyFr1V71RHFezmHYalFWpcQU=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","QuizPage","_s","_quiz$","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","userId","setUserId","otp","setOtp","fetchQuizData","response","fetch","data","json","handleAnswerChange","answerId","handleNextQuestion","checkAnswer","prevIndex","question","correctAnswer","answers","find","answer","is_correct","prevScore","marks","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","alert","method","headers","body","JSON","stringify","quizId","getAnswers","console","log","message","error","map","questionId","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","onClick","answer_text","disabled","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [userId, setUserId] = useState(null); // Track the logged-in user\r\n  const [otp, setOtp] = useState(''); // OTP input by user\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n      const data = await response.json();\r\n      setQuiz(data);\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Handle answer change (select answer for the current question)\r\n  const handleAnswerChange = (answerId) => {\r\n    setSelectedAnswer(answerId);\r\n  };\r\n\r\n  // Handle next question (after answering)\r\n  const handleNextQuestion = () => {\r\n    if (selectedAnswer) {\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  };\r\n\r\n  // Check answer correctness and update score\r\n  const checkAnswer = (answerId) => {\r\n    const question = quiz[currentQuestionIndex];\r\n    const correctAnswer = question.answers.find((answer) => answer.is_correct);\r\n    if (correctAnswer.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n    }\r\n  };\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz]);\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (!userId || !otp || currentQuestionIndex !== quiz.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, otp, quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      alert(`Your score: ${score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return quiz.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswer,\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz[0]?.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answers.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`}\r\n              onClick={() => handleAnswerChange(answer.id)}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n\r\n      {/* User ID and OTP Inputs */}\r\n      <div>\r\n        <label>\r\n          User ID:\r\n          <input\r\n            type=\"text\"\r\n            value={userId || ''}\r\n            onChange={(e) => setUserId(e.target.value)}\r\n            placeholder=\"Enter your User ID\"\r\n          />\r\n        </label>\r\n      </div>\r\n      <div>\r\n        <label>\r\n          OTP:\r\n          <input\r\n            type=\"text\"\r\n            value={otp}\r\n            onChange={(e) => setOtp(e.target.value)}\r\n            placeholder=\"Enter your OTP\"\r\n          />\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}