{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  var _quiz$;\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const navigate = useNavigate(); // Hook for navigation\n  const [quiz, setQuiz] = useState(null); // Store quiz data\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        if (response.ok) {\n          const data = await response.json();\n          setQuiz(data); // Set quiz data\n        } else {\n          console.error(\"Error fetching quiz data:\", response.status);\n          alert(\"Quiz not found or error fetching quiz data.\");\n        }\n      } catch (error) {\n        console.error(\"Error during fetch:\", error);\n        alert(\"Error fetching quiz data.\");\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz[currentQuestionIndex];\n    const correctAnswer = question === null || question === void 0 ? void 0 : question.options.find(answer => answer.is_correct);\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n      setIsAnswerCorrect(true); // Set to true if the answer is correct\n    } else {\n      setIsAnswerCorrect(false); // Set to false if the answer is incorrect\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer !== null) {\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\n      setSelectedAnswer(null); // Reset selected answer\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswer, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && (quiz === null || quiz === void 0 ? void 0 : quiz.length) > 0 && currentQuestionIndex < quiz.length) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (currentQuestionIndex !== (quiz === null || quiz === void 0 ? void 0 : quiz.length)) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n\n      // Navigate to results page after submission\n      alert(`Your score: ${score}`);\n      navigate(`/quiz-results/${id}`); // Redirect to results page (change path as per your routes)\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return quiz === null || quiz === void 0 ? void 0 : quiz.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswer\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_quiz$ = quiz[0]) === null || _quiz$ === void 0 ? void 0 : _quiz$.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-options\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`,\n          onClick: () => setSelectedAnswer(answer.id) // Handle selecting an answer\n          ,\n          children: answer.text\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next-button\",\n      children: currentQuestionIndex < quiz.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), isAnswerCorrect !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-feedback\",\n      children: isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"Wq4xPVOgZjGtB9IIkR9OyN0zMWQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","_s","_quiz$","id","navigate","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","isAnswerCorrect","setIsAnswerCorrect","fetchQuizData","response","fetch","ok","data","json","console","error","status","alert","checkAnswer","answerId","question","correctAnswer","options","find","answer","is_correct","prevScore","marks","handleNextQuestion","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","method","headers","body","JSON","stringify","quizId","answers","getAnswers","log","message","map","questionId","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","quiz_title","question_text","onClick","text","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const navigate = useNavigate(); // Hook for navigation\r\n  const [quiz, setQuiz] = useState(null); // Store quiz data\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null); // Track if the selected answer was correct or not\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setQuiz(data); // Set quiz data\r\n        } else {\r\n          console.error(\"Error fetching quiz data:\", response.status);\r\n          alert(\"Quiz not found or error fetching quiz data.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during fetch:\", error);\r\n        alert(\"Error fetching quiz data.\");\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]);\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz?.[currentQuestionIndex];\r\n    const correctAnswer = question?.options.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer?.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n      setIsAnswerCorrect(true); // Set to true if the answer is correct\r\n    } else {\r\n      setIsAnswerCorrect(false); // Set to false if the answer is incorrect\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswer !== null) {\r\n      checkAnswer(selectedAnswer); // Check if the selected answer is correct\r\n      setSelectedAnswer(null); // Reset selected answer\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswer, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && quiz?.length > 0 && currentQuestionIndex < quiz.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (currentQuestionIndex !== quiz?.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n\r\n      // Navigate to results page after submission\r\n      alert(`Your score: ${score}`);\r\n      navigate(`/quiz-results/${id}`); // Redirect to results page (change path as per your routes)\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return quiz?.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswer,\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <h1>{quiz[0]?.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div className=\"question-container\">\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div className=\"timer\">Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answer-options\">\r\n          {currentQuestion?.options.map((answer) => (\r\n            <div\r\n              key={answer.id}\r\n              className={`answer-option ${selectedAnswer === answer.id ? 'selected' : ''}`}\r\n              onClick={() => setSelectedAnswer(answer.id)} // Handle selecting an answer\r\n            >\r\n              {answer.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div className=\"next-button\">\r\n        {currentQuestionIndex < quiz.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Feedback for the selected answer */}\r\n      {isAnswerCorrect !== null && (\r\n        <div className=\"answer-feedback\">\r\n          {isAnswerCorrect ? 'Correct Answer!' : 'Incorrect Answer.'}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}