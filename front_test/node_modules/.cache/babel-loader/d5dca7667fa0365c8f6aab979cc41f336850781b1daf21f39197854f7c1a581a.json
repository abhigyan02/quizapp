{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for all questions\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        const data = await response.json();\n        console.log('Quiz Data:', data); // Log the data to see what is returned\n        setQuiz(data);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n      }\n    };\n    fetchQuizData();\n  }, [id]); // Fetch quiz data on mount or when `id` changes\n\n  // Log the selected answers and calculate score whenever selectedAnswers changes\n  useEffect(() => {\n    let totalScore = 0; // Initialize total score to 0\n    Object.entries(selectedAnswers).forEach(([questionId, selectedAnswerText]) => {\n      const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions.find(q => q.id === parseInt(questionId));\n      if (question) {\n        const selectedAnswer = question.answer_options.find(answer => answer.answer_text === selectedAnswerText);\n        if (selectedAnswer !== null && selectedAnswer !== void 0 && selectedAnswer.is_correct) {\n          totalScore += question.marks; // Add marks for correct answer\n        }\n      }\n    });\n    setScore(totalScore); // Update the score\n    console.log('Current Score:', totalScore); // Log current score to console\n  }, [selectedAnswers, quiz]); // Re-run when selectedAnswers or quiz changes\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(answerId => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const correctAnswer = question === null || question === void 0 ? void 0 : question.answer_options.find(answer => answer.is_correct);\n    if ((correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.id) === answerId) {\n      setScore(prevScore => prevScore + question.marks);\n    }\n  }, [currentQuestionIndex, quiz]);\n\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\n  const handleNextQuestion = useCallback(() => {\n    var _quiz$questions$curre;\n    if (selectedAnswers[quiz === null || quiz === void 0 ? void 0 : (_quiz$questions$curre = quiz.questions[currentQuestionIndex]) === null || _quiz$questions$curre === void 0 ? void 0 : _quiz$questions$curre.id]) {\n      var _quiz$questions$curre2;\n      checkAnswer(selectedAnswers[quiz === null || quiz === void 0 ? void 0 : (_quiz$questions$curre2 = quiz.questions[currentQuestionIndex]) === null || _quiz$questions$curre2 === void 0 ? void 0 : _quiz$questions$curre2.id]); // Check if the selected answer is correct\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to next question\n      setTimer(30); // Reset timer for the next question\n    }\n  }, [selectedAnswers, currentQuestionIndex, quiz, checkAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (currentQuestionIndex !== (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quizId: id,\n          answers: getAnswers()\n        })\n      });\n      const data = await response.json();\n      console.log(data.message);\n      alert(`Your score: ${score}`);\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return quiz === null || quiz === void 0 ? void 0 : quiz.questions.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswers[question.id]\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n  if (!(quiz !== null && quiz !== void 0 && quiz.questions) || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available for this quiz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answer_options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Use answer_text as key since it's unique\n          className: `answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}` // Apply 'selected' class based on text match\n          ,\n          onClick: () => {\n            setSelectedAnswers(prevAnswers => ({\n              ...prevAnswers,\n              [currentQuestion.id]: answer.answer_text // Store answer by question ID\n            }));\n          },\n          children: answer.answer_text\n        }, answer.answer_text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswers[currentQuestion.id],\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"LCSIeJXrmxVM6zm1y1jqpeIg4r0=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","timer","setTimer","score","setScore","fetchQuizData","response","fetch","data","json","console","log","error","totalScore","Object","entries","forEach","questionId","selectedAnswerText","question","questions","find","q","parseInt","selectedAnswer","answer_options","answer","answer_text","is_correct","marks","checkAnswer","answerId","correctAnswer","prevScore","handleNextQuestion","_quiz$questions$curre","_quiz$questions$curre2","prevIndex","length","timerInterval","setInterval","prevTimer","clearInterval","submitQuiz","alert","method","headers","body","JSON","stringify","quizId","answers","getAnswers","message","map","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","onClick","prevAnswers","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for all questions\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        const data = await response.json();\r\n        console.log('Quiz Data:', data); // Log the data to see what is returned\r\n        setQuiz(data);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id]); // Fetch quiz data on mount or when `id` changes\r\n\r\n  // Log the selected answers and calculate score whenever selectedAnswers changes\r\n  useEffect(() => {\r\n    let totalScore = 0; // Initialize total score to 0\r\n    Object.entries(selectedAnswers).forEach(([questionId, selectedAnswerText]) => {\r\n      const question = quiz?.questions.find((q) => q.id === parseInt(questionId));\r\n      if (question) {\r\n        const selectedAnswer = question.answer_options.find(\r\n          (answer) => answer.answer_text === selectedAnswerText\r\n        );\r\n        if (selectedAnswer?.is_correct) {\r\n          totalScore += question.marks; // Add marks for correct answer\r\n        }\r\n      }\r\n    });\r\n\r\n    setScore(totalScore); // Update the score\r\n    console.log('Current Score:', totalScore); // Log current score to console\r\n  }, [selectedAnswers, quiz]); // Re-run when selectedAnswers or quiz changes\r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback((answerId) => {\r\n    const question = quiz?.questions[currentQuestionIndex];\r\n    const correctAnswer = question?.answer_options.find((answer) => answer.is_correct);\r\n\r\n    if (correctAnswer?.id === answerId) {\r\n      setScore((prevScore) => prevScore + question.marks);\r\n    }\r\n  }, [currentQuestionIndex, quiz]);\r\n\r\n  // Memoize the handleNextQuestion function to prevent it from being recreated on every render\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (selectedAnswers[quiz?.questions[currentQuestionIndex]?.id]) {\r\n      checkAnswer(selectedAnswers[quiz?.questions[currentQuestionIndex]?.id]); // Check if the selected answer is correct\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1); // Move to next question\r\n      setTimer(30); // Reset timer for the next question\r\n    }\r\n  }, [selectedAnswers, currentQuestionIndex, quiz, checkAnswer]);\r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (currentQuestionIndex !== quiz?.questions.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ quizId: id, answers: getAnswers() }),\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      alert(`Your score: ${score}`);\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return quiz?.questions.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswers[question.id],\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (!quiz?.questions || quiz.questions.length === 0) {\r\n    return <div>No questions available for this quiz.</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answer_options.map((answer) => (\r\n            <div\r\n              key={answer.answer_text} // Use answer_text as key since it's unique\r\n              className={`answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}`} // Apply 'selected' class based on text match\r\n              onClick={() => {\r\n                setSelectedAnswers((prevAnswers) => ({\r\n                  ...prevAnswers,\r\n                  [currentQuestion.id]: answer.answer_text, // Store answer by question ID\r\n                }));\r\n              }}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswers[currentQuestion.id]}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrE,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEvC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCb,EAAE,EAAE,CAAC;QACpE,MAAMc,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,IAAI,CAAC,CAAC,CAAC;QACjCZ,OAAO,CAACY,IAAI,CAAC;MACf,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDP,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACX,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACAP,SAAS,CAAC,MAAM;IACd,IAAI0B,UAAU,GAAG,CAAC,CAAC,CAAC;IACpBC,MAAM,CAACC,OAAO,CAAChB,eAAe,CAAC,CAACiB,OAAO,CAAC,CAAC,CAACC,UAAU,EAAEC,kBAAkB,CAAC,KAAK;MAC5E,MAAMC,QAAQ,GAAGxB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC5B,EAAE,KAAK6B,QAAQ,CAACN,UAAU,CAAC,CAAC;MAC3E,IAAIE,QAAQ,EAAE;QACZ,MAAMK,cAAc,GAAGL,QAAQ,CAACM,cAAc,CAACJ,IAAI,CAChDK,MAAM,IAAKA,MAAM,CAACC,WAAW,KAAKT,kBACrC,CAAC;QACD,IAAIM,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEI,UAAU,EAAE;UAC9Bf,UAAU,IAAIM,QAAQ,CAACU,KAAK,CAAC,CAAC;QAChC;MACF;IACF,CAAC,CAAC;IAEFzB,QAAQ,CAACS,UAAU,CAAC,CAAC,CAAC;IACtBH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,UAAU,CAAC,CAAC,CAAC;EAC7C,CAAC,EAAE,CAACd,eAAe,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAMmC,WAAW,GAAG1C,WAAW,CAAE2C,QAAQ,IAAK;IAC5C,MAAMZ,QAAQ,GAAGxB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACvB,oBAAoB,CAAC;IACtD,MAAMmC,aAAa,GAAGb,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,cAAc,CAACJ,IAAI,CAAEK,MAAM,IAAKA,MAAM,CAACE,UAAU,CAAC;IAElF,IAAI,CAAAI,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEtC,EAAE,MAAKqC,QAAQ,EAAE;MAClC3B,QAAQ,CAAE6B,SAAS,IAAKA,SAAS,GAAGd,QAAQ,CAACU,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,CAAChC,oBAAoB,EAAEF,IAAI,CAAC,CAAC;;EAEhC;EACA,MAAMuC,kBAAkB,GAAG9C,WAAW,CAAC,MAAM;IAAA,IAAA+C,qBAAA;IAC3C,IAAIpC,eAAe,CAACJ,IAAI,aAAJA,IAAI,wBAAAwC,qBAAA,GAAJxC,IAAI,CAAEyB,SAAS,CAACvB,oBAAoB,CAAC,cAAAsC,qBAAA,uBAArCA,qBAAA,CAAuCzC,EAAE,CAAC,EAAE;MAAA,IAAA0C,sBAAA;MAC9DN,WAAW,CAAC/B,eAAe,CAACJ,IAAI,aAAJA,IAAI,wBAAAyC,sBAAA,GAAJzC,IAAI,CAAEyB,SAAS,CAACvB,oBAAoB,CAAC,cAAAuC,sBAAA,uBAArCA,sBAAA,CAAuC1C,EAAE,CAAC,CAAC,CAAC,CAAC;MACzEI,uBAAuB,CAAEuC,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;MACvDnC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACH,eAAe,EAAEF,oBAAoB,EAAEF,IAAI,EAAEmC,WAAW,CAAC,CAAC;;EAE9D;EACA3C,SAAS,CAAC,MAAM;IACd,IAAIc,KAAK,GAAG,CAAC,IAAIJ,oBAAoB,IAAGF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACkB,MAAM,GAAE;MAC9D,MAAMC,aAAa,GAAGC,WAAW,CAAC,MAAM;QACtCtC,QAAQ,CAAEuC,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MACxC,CAAC,EAAE,IAAI,CAAC;MACR,OAAO,MAAMC,aAAa,CAACH,aAAa,CAAC;IAC3C,CAAC,MAAM,IAAItC,KAAK,KAAK,CAAC,EAAE;MACtBiC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACjC,KAAK,EAAEJ,oBAAoB,EAAEF,IAAI,EAAEuC,kBAAkB,CAAC,CAAC;;EAE3D;EACA,MAAMS,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI9C,oBAAoB,MAAKF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACkB,MAAM,GAAE;MACnDM,KAAK,CAAC,6CAA6C,CAAC;MACpD;IACF;IAEA,IAAI;MACF,MAAMtC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEsC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAExD,EAAE;UAAEyD,OAAO,EAAEC,UAAU,CAAC;QAAE,CAAC;MAC5D,CAAC,CAAC;MACF,MAAM5C,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC6C,OAAO,CAAC;MACzBT,KAAK,CAAC,eAAezC,KAAK,EAAE,CAAC;IAC/B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMwC,UAAU,GAAGA,CAAA,KAAM;IACvB,OAAOzD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACkC,GAAG,CAAEnC,QAAQ,KAAM;MACxCF,UAAU,EAAEE,QAAQ,CAACzB,EAAE;MACvBqC,QAAQ,EAAEhC,eAAe,CAACoB,QAAQ,CAACzB,EAAE;IACvC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,IAAI,CAACC,IAAI,EAAE;IACT,oBAAOJ,OAAA;MAAAgE,QAAA,EAAK;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACnC;EAEA,IAAI,EAAChE,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEyB,SAAS,KAAIzB,IAAI,CAACyB,SAAS,CAACkB,MAAM,KAAK,CAAC,EAAE;IACnD,oBAAO/C,OAAA;MAAAgE,QAAA,EAAK;IAAqC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzD;EAEA,MAAMC,eAAe,GAAGjE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB,SAAS,CAACvB,oBAAoB,CAAC;EAE7D,oBACEN,OAAA;IAAAgE,QAAA,gBACEhE,OAAA;MAAAgE,QAAA,EAAK5D,IAAI,CAACkE;IAAU;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAG1BpE,OAAA;MAAAgE,QAAA,gBACEhE,OAAA;QAAAgE,QAAA,EAAKK,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEE;MAAa;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzCpE,OAAA;QAAAgE,QAAA,GAAK,aAAW,EAACtD,KAAK,EAAC,GAAC;MAAA;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAG9BpE,OAAA;QAAKwE,SAAS,EAAC,SAAS;QAAAR,QAAA,EACrBK,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEnC,cAAc,CAAC6B,GAAG,CAAE5B,MAAM,iBAC1CnC,OAAA;UAC2B;UACzBwE,SAAS,EAAE,iBAAiBhE,eAAe,CAAC6D,eAAe,CAAClE,EAAE,CAAC,KAAKgC,MAAM,CAACC,WAAW,GAAG,UAAU,GAAG,EAAE,EAAG,CAAC;UAAA;UAC5GqC,OAAO,EAAEA,CAAA,KAAM;YACbhE,kBAAkB,CAAEiE,WAAW,KAAM;cACnC,GAAGA,WAAW;cACd,CAACL,eAAe,CAAClE,EAAE,GAAGgC,MAAM,CAACC,WAAW,CAAE;YAC5C,CAAC,CAAC,CAAC;UACL,CAAE;UAAA4B,QAAA,EAED7B,MAAM,CAACC;QAAW,GATdD,MAAM,CAACC,WAAW;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUpB,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNpE,OAAA;MAAAgE,QAAA,EACG1D,oBAAoB,GAAGF,IAAI,CAACyB,SAAS,CAACkB,MAAM,GAAG,CAAC,gBAC/C/C,OAAA;QAAQyE,OAAO,EAAE9B,kBAAmB;QAACgC,QAAQ,EAAE,CAACnE,eAAe,CAAC6D,eAAe,CAAClE,EAAE,CAAE;QAAA6D,QAAA,EAAC;MAErF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAETpE,OAAA;QAAQyE,OAAO,EAAErB,UAAW;QAAAY,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IACjD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClE,EAAA,CAzJID,QAAQ;EAAA,QACGH,SAAS;AAAA;AAAA8E,EAAA,GADpB3E,QAAQ;AA2Jd,eAAeA,QAAQ;AAAC,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}