{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n  const [userId, setUserId] = useState(null); // Track the logged-in user\n  const [otp, setOtp] = useState(''); // OTP input by user\n\n  // Fetch quiz data on page load\n  useEffect(() => {\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        const data = await response.json();\n        console.log('Quiz Data:', data); // Log the data to see what is returned\n        setQuiz(data);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n      }\n    };\n    fetchQuizData();\n  }, [id]);\n\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\n  const checkAnswer = useCallback(() => {\n    const question = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n    const selectedAnswerText = selectedAnswer;\n\n    // Find the answer option that matches the selected answer text\n    const selectedAnswerOption = question === null || question === void 0 ? void 0 : question.answer_options.find(answer => answer.answer_text === selectedAnswerText);\n\n    // If the selected answer option is correct, update the score\n    if (selectedAnswerOption && selectedAnswerOption.is_correct) {\n      setScore(prevScore => prevScore + question.marks); // Add marks to score if correct\n    }\n  }, [currentQuestionIndex, quiz, selectedAnswer]);\n\n  // Countdown timer for each question\n  useEffect(() => {\n    if (timer > 0 && currentQuestionIndex < (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      const timerInterval = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else if (timer === 0) {\n      handleNextQuestion(); // Move to next question when timer expires\n    }\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\n\n  // Submit quiz to the server\n  const submitQuiz = async () => {\n    if (!userId || !otp || currentQuestionIndex !== (quiz === null || quiz === void 0 ? void 0 : quiz.questions.length)) {\n      alert('Please complete the quiz before submitting.');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          otp,\n          quizId: id,\n          answers: getAnswers()\n        }) // Fix string interpolation here\n      });\n      const data = await response.json();\n      console.log(data.message);\n      alert(`Your score: ${score}`); // Fix string interpolation here\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n    }\n  };\n\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\n  const getAnswers = () => {\n    return quiz === null || quiz === void 0 ? void 0 : quiz.questions.map(question => ({\n      questionId: question.id,\n      answerId: selectedAnswer\n    }));\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  }\n  if (!(quiz !== null && quiz !== void 0 && quiz.questions) || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available for this quiz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answer_options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Use answer_text as key since it's unique\n          className: `answer-option ${selectedAnswer === answer.answer_text ? 'selected' : ''}` // Fix className syntax here\n          ,\n          onClick: () => {\n            console.log(selectedAnswer);\n            console.log(`Answer clicked: ${answer.answer_text}`); // Debugging log\n            setSelectedAnswer(answer.answer_text); // Handle selecting an answer based on text\n          },\n          children: answer.answer_text\n        }, answer.answer_text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswer,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"30M1w+Q39voY1/yBo0SBrYtNE7Y=\", false, function () {\n  return [useParams];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","timer","setTimer","score","setScore","userId","setUserId","otp","setOtp","fetchQuizData","response","fetch","data","json","console","log","error","checkAnswer","question","questions","selectedAnswerText","selectedAnswerOption","answer_options","find","answer","answer_text","is_correct","prevScore","marks","length","timerInterval","setInterval","prevTimer","clearInterval","handleNextQuestion","submitQuiz","alert","method","headers","body","JSON","stringify","quizId","answers","getAnswers","message","map","questionId","answerId","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","quiz_title","question_text","className","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null); // Track selected answer for the current question\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n  const [userId, setUserId] = useState(null); // Track the logged-in user\r\n  const [otp, setOtp] = useState(''); // OTP input by user\r\n\r\n  // Fetch quiz data on page load\r\n  useEffect(() => {\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        const data = await response.json();\r\n        console.log('Quiz Data:', data); // Log the data to see what is returned\r\n        setQuiz(data);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchQuizData();\r\n  }, [id]);\r\n  \r\n\r\n  // Memoize the checkAnswer function to prevent it from being recreated on every render\r\n  const checkAnswer = useCallback(() => {\r\n    const question = quiz?.questions[currentQuestionIndex];\r\n    const selectedAnswerText = selectedAnswer;\r\n  \r\n    // Find the answer option that matches the selected answer text\r\n    const selectedAnswerOption = question?.answer_options.find((answer) => answer.answer_text === selectedAnswerText);\r\n  \r\n    // If the selected answer option is correct, update the score\r\n    if (selectedAnswerOption && selectedAnswerOption.is_correct) {\r\n      setScore((prevScore) => prevScore + question.marks); // Add marks to score if correct\r\n    }\r\n  }, [currentQuestionIndex, quiz, selectedAnswer]);\r\n  \r\n\r\n  // Countdown timer for each question\r\n  useEffect(() => {\r\n    if (timer > 0 && currentQuestionIndex < quiz?.questions.length) {\r\n      const timerInterval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n      return () => clearInterval(timerInterval);\r\n    } else if (timer === 0) {\r\n      handleNextQuestion(); // Move to next question when timer expires\r\n    }\r\n  }, [timer, currentQuestionIndex, quiz, handleNextQuestion]);\r\n\r\n  // Submit quiz to the server\r\n  const submitQuiz = async () => {\r\n    if (!userId || !otp || currentQuestionIndex !== quiz?.questions.length) {\r\n      alert('Please complete the quiz before submitting.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userId, otp, quizId: id, answers: getAnswers() }), // Fix string interpolation here\r\n      });\r\n      const data = await response.json();\r\n      console.log(data.message);\r\n      alert(`Your score: ${score}`); // Fix string interpolation here\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n    }\r\n  };\r\n\r\n  // Get answers in the required format to send to the backend (assuming { questionId, answerId })\r\n  const getAnswers = () => {\r\n    return quiz?.questions.map((question) => ({\r\n      questionId: question.id,\r\n      answerId: selectedAnswer,\r\n    }));\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (!quiz?.questions || quiz.questions.length === 0) {\r\n    return <div>No questions available for this quiz.</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answer_options.map((answer) => (\r\n            <div\r\n              key={answer.answer_text} // Use answer_text as key since it's unique\r\n              className={`answer-option ${selectedAnswer === answer.answer_text ? 'selected' : ''}`} // Fix className syntax here\r\n              onClick={() => {\r\n                console.log(selectedAnswer);\r\n                console.log(`Answer clicked: ${answer.answer_text}`); // Debugging log\r\n                setSelectedAnswer(answer.answer_text); // Handle selecting an answer based on text\r\n              }}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion} disabled={!selectedAnswer}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}