{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\n// src/pages/QuizPage.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { getQuizDetails } from '../api'; // Importing the API functions\nimport { submitQuizResult } from '../api'; // Importing submitQuizResult from services\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL\n  const [quiz, setQuiz] = useState(null);\n  const [answers, setAnswers] = useState([]);\n  const history = useHistory();\n  const userId = 1; // Example: Get the logged-in user’s ID from context or state (replace with real logic)\n  const otp = '123456'; // Example OTP. You should fetch this from the user's session or auth context\n\n  useEffect(() => {\n    async function fetchQuizDetails() {\n      const data = await getQuizDetails(id); // Fetch quiz details using quizId from the URL\n      setQuiz(data);\n    }\n    fetchQuizDetails();\n  }, [id]); // Re-run the effect when quizId changes\n\n  const handleAnswer = (questionId, answer) => {\n    // Update the answer for a particular question\n    setAnswers(prevAnswers => {\n      const updatedAnswers = [...prevAnswers];\n      updatedAnswers[questionId] = answer; // Store answer for the given questionId\n      return updatedAnswers;\n    });\n  };\n  const handleSubmit = () => {\n    // Create the result object to submit to the backend\n    const result = {\n      userId: userId,\n      // Use actual logged-in user's ID\n      otp: otp,\n      // Use actual OTP from session/context\n      quizId: quiz.id,\n      answers: answers.map((answer, index) => ({\n        questionId: quiz.questions[index].id,\n        isCorrect: answer.isCorrect // Map selected answers to the result\n      }))\n    };\n\n    // Submit the quiz result via the API\n    submitQuizResult(result);\n\n    // Redirect to the result page after successful submission\n    history.push('/result');\n  };\n  if (!quiz) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 21\n  }, this); // Show loading if quiz data hasn't been fetched yet\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: quiz.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: question.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), question.answers.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${question.id}`,\n              onChange: () => handleAnswer(index, {\n                answerText: answer.answer_text,\n                isCorrect: answer.is_correct\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this), answer.answer_text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)\n        }, answer.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"6N9J5Q8PkUttKCakBK1lkBbtxf4=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useHistory","getQuizDetails","submitQuizResult","jsxDEV","_jsxDEV","QuizPage","_s","id","quiz","setQuiz","answers","setAnswers","history","userId","otp","fetchQuizDetails","data","handleAnswer","questionId","answer","prevAnswers","updatedAnswers","handleSubmit","result","quizId","map","index","questions","isCorrect","push","children","fileName","_jsxFileName","lineNumber","columnNumber","title","question","question_text","type","name","onChange","answerText","answer_text","is_correct","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["// src/pages/QuizPage.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { getQuizDetails } from '../api'; // Importing the API functions\r\nimport { submitQuizResult } from '../api'; // Importing submitQuizResult from services\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams();  // Get quiz ID from URL\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [answers, setAnswers] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const userId = 1; // Example: Get the logged-in user’s ID from context or state (replace with real logic)\r\n  const otp = '123456'; // Example OTP. You should fetch this from the user's session or auth context\r\n\r\n  useEffect(() => {\r\n    async function fetchQuizDetails() {\r\n      const data = await getQuizDetails(id);  // Fetch quiz details using quizId from the URL\r\n      setQuiz(data);\r\n    }\r\n    fetchQuizDetails();\r\n  }, [id]);  // Re-run the effect when quizId changes\r\n\r\n  const handleAnswer = (questionId, answer) => {\r\n    // Update the answer for a particular question\r\n    setAnswers((prevAnswers) => {\r\n      const updatedAnswers = [...prevAnswers];\r\n      updatedAnswers[questionId] = answer;  // Store answer for the given questionId\r\n      return updatedAnswers;\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Create the result object to submit to the backend\r\n    const result = {\r\n      userId: userId,  // Use actual logged-in user's ID\r\n      otp: otp,  // Use actual OTP from session/context\r\n      quizId: quiz.id,\r\n      answers: answers.map((answer, index) => ({\r\n        questionId: quiz.questions[index].id,\r\n        isCorrect: answer.isCorrect,  // Map selected answers to the result\r\n      })),\r\n    };\r\n\r\n    // Submit the quiz result via the API\r\n    submitQuizResult(result);\r\n    \r\n    // Redirect to the result page after successful submission\r\n    history.push('/result');\r\n  };\r\n\r\n  if (!quiz) return <div>Loading...</div>;  // Show loading if quiz data hasn't been fetched yet\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.title}</h1>\r\n      <div>\r\n        {quiz.questions.map((question, index) => (\r\n          <div key={question.id}>\r\n            <h3>{question.question_text}</h3>\r\n            {question.answers.map((answer) => (\r\n              <div key={answer.id}>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={`question-${question.id}`}\r\n                    onChange={() => handleAnswer(index, { answerText: answer.answer_text, isCorrect: answer.is_correct })}\r\n                  />\r\n                  {answer.answer_text}\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={handleSubmit}>Submit</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}