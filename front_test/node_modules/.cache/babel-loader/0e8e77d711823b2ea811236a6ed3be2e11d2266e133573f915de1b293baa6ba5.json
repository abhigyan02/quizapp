{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kholoods\\\\react\\\\quizapp\\\\front_test\\\\src\\\\pages\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom'; // Import useNavigate\nimport './../../src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Get quiz ID from URL parameter\n  const navigate = useNavigate(); // Initialize navigate\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for all questions\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\n  const [score, setScore] = useState(0); // Total score\n\n  useEffect(() => {\n    const isLoggedIn = localStorage.getItem('user_email'); // Check if user is logged in\n    if (!isLoggedIn) {\n      navigate('/login'); // If not logged in, redirect to login page\n    }\n    const fetchQuizData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\n        const data = await response.json();\n        console.log('Quiz Data:', data); // Log the data to see what is returned\n        setQuiz(data);\n      } catch (error) {\n        console.error('Error fetching quiz data:', error);\n      }\n    };\n    fetchQuizData();\n  }, [id, navigate]); // Fetch quiz data on mount or when `id` changes\n\n  // Handle the remaining quiz logic (question navigation, timer, etc.) here (as in your original code)\n\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  if (!(quiz !== null && quiz !== void 0 && quiz.questions) || quiz.questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions available for this quiz.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quiz === null || quiz === void 0 ? void 0 : quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quiz.quiz_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Time Left: \", timer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.answer_options.map(answer => /*#__PURE__*/_jsxDEV(\"div\", {\n          // Use answer_text as key since it's unique\n          className: `answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}` // Apply 'selected' class based on text match\n          ,\n          onClick: () => {\n            setSelectedAnswers(prevAnswers => ({\n              ...prevAnswers,\n              [currentQuestion.id]: answer.answer_text // Store answer by question ID\n            }));\n          },\n          children: answer.answer_text\n        }, answer.answer_text, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestionIndex < quiz.questions.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-question-btn\",\n        onClick: handleNextQuestion,\n        disabled: !selectedAnswers[currentQuestion.id],\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-quiz-btn\",\n        onClick: submitQuiz,\n        children: \"Submit Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"2J2422J4cloG8jwl/1h0Q1u2nOc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useParams","jsxDEV","_jsxDEV","QuizPage","_s","id","navigate","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","timer","setTimer","score","setScore","isLoggedIn","localStorage","getItem","fetchQuizData","response","fetch","data","json","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","questions","length","currentQuestion","quiz_title","question_text","className","answer_options","map","answer","answer_text","onClick","prevAnswers","handleNextQuestion","disabled","submitQuiz","_c","$RefreshReg$"],"sources":["C:/Users/kholoods/react/quizapp/front_test/src/pages/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom'; // Import useNavigate\r\nimport './../../src/App.css';\r\n\r\nconst QuizPage = () => {\r\n  const { id } = useParams(); // Get quiz ID from URL parameter\r\n  const navigate = useNavigate(); // Initialize navigate\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Track the current question index\r\n  const [selectedAnswers, setSelectedAnswers] = useState({}); // Track answers for all questions\r\n  const [timer, setTimer] = useState(30); // Timer for each question (30 seconds per question)\r\n  const [score, setScore] = useState(0); // Total score\r\n\r\n  useEffect(() => {\r\n    const isLoggedIn = localStorage.getItem('user_email'); // Check if user is logged in\r\n    if (!isLoggedIn) {\r\n      navigate('/login'); // If not logged in, redirect to login page\r\n    }\r\n\r\n    const fetchQuizData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/api/quiz/${id}`);\r\n        const data = await response.json();\r\n        console.log('Quiz Data:', data); // Log the data to see what is returned\r\n        setQuiz(data);\r\n      } catch (error) {\r\n        console.error('Error fetching quiz data:', error);\r\n      }\r\n    };\r\n\r\n    fetchQuizData();\r\n  }, [id, navigate]); // Fetch quiz data on mount or when `id` changes\r\n\r\n  // Handle the remaining quiz logic (question navigation, timer, etc.) here (as in your original code)\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (!quiz?.questions || quiz.questions.length === 0) {\r\n    return <div>No questions available for this quiz.</div>;\r\n  }\r\n\r\n  const currentQuestion = quiz?.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h1>{quiz.quiz_title}</h1>\r\n\r\n      {/* Display Question and Timer */}\r\n      <div>\r\n        <h3>{currentQuestion?.question_text}</h3>\r\n        <div>Time Left: {timer}s</div>\r\n\r\n        {/* Display the answer options */}\r\n        <div className=\"answers\">\r\n          {currentQuestion?.answer_options.map((answer) => (\r\n            <div\r\n              key={answer.answer_text} // Use answer_text as key since it's unique\r\n              className={`answer-option ${selectedAnswers[currentQuestion.id] === answer.answer_text ? 'selected' : ''}`} // Apply 'selected' class based on text match\r\n              onClick={() => {\r\n                setSelectedAnswers((prevAnswers) => ({\r\n                  ...prevAnswers,\r\n                  [currentQuestion.id]: answer.answer_text, // Store answer by question ID\r\n                }));\r\n              }}\r\n            >\r\n              {answer.answer_text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Next Button */}\r\n      <div>\r\n        {currentQuestionIndex < quiz.questions.length - 1 ? (\r\n          <button\r\n            className=\"next-question-btn\"\r\n            onClick={handleNextQuestion} \r\n            disabled={!selectedAnswers[currentQuestion.id]}>\r\n            Next Question\r\n          </button>\r\n        ) : (\r\n          <button className=\"submit-quiz-btn\" onClick={submitQuiz}>Submit Quiz</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}